/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.asam.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.asam.asam.Entity
import org.xtext.example.asam.asam.Sboot
import org.xtext.example.asam.asam.Type
import org.xtext.example.asam.asam.ListType
import org.xtext.example.asam.asam.SetType
import org.xtext.example.asam.asam.RType
import java.util.ArrayList
import java.io.IOException
import java.nio.file.Paths
import java.nio.file.Files
import java.nio.file.StandardCopyOption
import org.xtext.example.asam.asam.Configuration

/*import org.xtext.example.asam.asam.Type
import org.xtext.example.asam.asam.VTypes
import org.xtext.example.asam.asam.ListType*/

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AsamGenerator extends AbstractGenerator {

	
	override void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
        //val outputFolder = "src-gen/entities"; // Change this to your desired output folder
        //fsa.generateFile("entities/.gitkeep", "");
        //override void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
       
    
    }
    
    
    
     
	//main fucntion for code generation
    override void doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
        input.allContents.forEach[ element |
            if (element instanceof Entity) {
                generateEntityClass(element as Entity, fsa,input);
            }
        ]
        generateMainClass(fsa,input)
        generateMavenFiles(fsa,input)
        generateTestFolder(fsa,input)
        val configuration = input.contents.filter(Configuration).head
        if (configuration !== null) {
            generatePropertiesFile1(configuration, fsa)
        }
    }
    
    def getHibernateDialect(String dbmsType) {
	    switch (dbmsType) {
	        case "MYSQL": return "org.hibernate.dialect.MySQL5Dialect"
	        case "POSTGRES": return "org.hibernate.dialect.PostgreSQLDialect"
	        case "MARIADB": return "org.hibernate.dialect.MariaDBDialect"
	        case "H2": return "org.hibernate.dialect.H2Dialect"
	        case "ORACLE": return "org.hibernate.dialect.Oracle12cDialect"
	        // Add more cases for other supported databases
	        default: return "org.hibernate.dialect.MySQL5Dialect"
    }
}
    
    def void generatePropertiesFile1(Configuration config,IFileSystemAccess2 fsa){
    	val propertiesContent = '''
            # Server Configuration
            server.port = «config.server?.port ?: 8080»
            server.cpath = «config.server?.path ?: "/api"»

            # Database Configuration
            spring.datasource.url = jdbc:«config.database?.type?: "mysql"»://localhost:«config.database?.port?: "3306"»/«configuration.database?.nom ?: "dbname"»
            spring.datasource.username = «config.database?.username ?: "root"»
            spring.datasource.password = «config.database?.password ?: "password"»

            # Hibernate Configuration
            spring.jpa.hibernate.ddl-auto = update
            spring.jpa.show-sql = true
            spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.«getHibernateDialect(config.database?.type)»

            # Additional Hibernate Properties
            # Add any additional Hibernate properties as needed
        '''
    	
    }
    
    
    def void generateMavenFiles(IFileSystemAccess2 fsa, Resource input) {
        // Generate POM.xml
        val pomContent = '''
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.5/apache-maven-3.9.5-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar
        '''
        val pomFilePath = "mvn/wrapper/maven-wrapper.properties"
        fsa.generateFile(pomFilePath, pomContent)

       
       
    }
    
    
    
    
    
    
    
    def String extractVtypesValue(String typeString) {
	    // Get the string representation of TypeImpl
	    
	    // Split the string by whitespace and get the last part
	    val parts = typeString.split("\\s+")
		val vtypesPart = parts.last	
	    // Extract the content between the parentheses
	    return vtypesPart.substring(0, vtypesPart.length() - 1)
	}
	
	//generating test folder
	 
	
	def generateTestFolder(IFileSystemAccess2 fsa,Resource input){
		val projectNameHolder = new ArrayList<String>()
    	input.allContents.forEach[element|
    		if(element instanceof Sboot){
 			projectNameHolder.add(element.nom);    		}
    	]
    	val projectName=projectNameHolder.get(0)
			val content2= '''
    package com.springboot.«projectName»;

    import org.junit.jupiter.api.Test;
    import org.springframework.boot.test.context.SpringBootTest;

    @SpringBootTest
    class «projectName.toFirstUpper»ApplicationTests {
    
    	@Test
    	void contextLoads() {
    	}
    
    }
'''
	
	val fpath="src/test/java/com/springboot/"+projectName+"/"+projectName.toFirstUpper+"ApplicationTests.java"
	fsa.generateFile(fpath,content2)
		
	}
	
	
	
	//generating the static class
	def generateMainClass(IFileSystemAccess2 fsa,Resource input){
		val projectNameHolder = new ArrayList<String>()
    	input.allContents.forEach[element|
    		if(element instanceof Sboot){
 			projectNameHolder.add(element.nom);    		}
    	]
    	val projectName=projectNameHolder.get(0)
			val content2= '''
    package com.springboot.«projectName»;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class «projectName.toFirstUpper»Application {

        public static void main(String[] args) {
            SpringApplication.run(«projectName.toFirstUpper»Application.class, args);
        }
    }
'''
	
	val fpath="src/main/java/com/springboot/"+projectName+"/"+projectName.toFirstUpper+"Application.java"
	fsa.generateFile(fpath,content2)
		
	}





    
    def String getSimpleTypeName(Type type) {
	     if (type instanceof ListType) {
	        return "List<" + getSimpleTypeName(type.type) + ">"
	    } else if (type instanceof SetType) {
	        return "Set<" + getSimpleTypeName(type.type) + ">"
	    } else if (type instanceof RType) {
	        return type.vypes.toString
	    } else {
	        return extractVtypesValue(type.toString())
	    }
 }
 		
 		
 
 
 
	def generateEntityClass(Entity entity, IFileSystemAccess2 fsa,Resource input) {
    	val projectNameHolder = new ArrayList<String>()
    	input.allContents.forEach[element|
    		if(element instanceof Sboot){
 			projectNameHolder.add(element.nom);    		}
    	]
    	val projectName=projectNameHolder.get(0)
        val className = entity.nom;
        val properties = entity.properties;
        val extendsClause=entity.extends;

        val content = '''
    package com.springboot.«projectName».entities;

    import jakarta.persistence.Entity;
    import jakarta.persistence.Table;
    import lombok.Builder;

    @Entity
    @Table(name = "«className»")
    @Builder
    public class «className» «IF extendsClause !== null»extends «extendsClause» «ENDIF»{
        «FOR property : properties»
            private «getSimpleTypeName(property.type)» «property.nom»;
        «ENDFOR»

        «FOR property : properties»
            public «getSimpleTypeName(property.type)» get«property.nom.toFirstUpper»() {
                return «property.nom»;
            }

            public void set«property.nom.toFirstUpper»(«getSimpleTypeName(property.type)» «property.nom») {
                this.«property.nom» = «property.nom»;
            }
        «ENDFOR»
    }
''';
	

        val folderPath = "src/main/java/com/springboot/"+projectName+"/entities";
        val filePath = folderPath + "/" + className + ".java";
        
        fsa.generateFile(filePath, content);
        
    }
}
