/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.asam.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.asam.asam.Entity
import org.xtext.example.asam.asam.Sboot
import org.xtext.example.asam.asam.Type
import org.xtext.example.asam.asam.VTypes
import org.xtext.example.asam.asam.ListType
import org.xtext.example.asam.asam.SetType
import org.xtext.example.asam.asam.RType
import java.util.ArrayList
import java.io.IOException

/*import org.xtext.example.asam.asam.Type
import org.xtext.example.asam.asam.VTypes
import org.xtext.example.asam.asam.ListType*/

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AsamGenerator extends AbstractGenerator {

	//override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
//	}
	override void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
        //val outputFolder = "src-gen/entities"; // Change this to your desired output folder
        //fsa.generateFile("entities/.gitkeep", "");
        //override void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val projectNameHolder = new ArrayList<String>()
        input.allContents.forEach[element |
            if (element instanceof Sboot) {
                projectNameHolder.add(element.nom);
            }
        ]
        val projectName = projectNameHolder.get(0)

        // Path to your existing project template
        val templateFolderPath = "C:/Users/Dell/Downloads/projectName"

        // Target path where the new project will be generated
        val targetFolderPath = "src-gen/" + projectName

        // Copy the existing project structure to the target location
        try {
            copyFolder(templateFolderPath, targetFolderPath)
        } catch (IOException e) {
            e.printStackTrace()
        }
    
    }

    override void doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
        input.allContents.forEach[ element |
            if (element instanceof Entity) {
                generateEntityClass(element as Entity, fsa,input);
            }
        ]
        generateMainClass(fsa,input)
        
    }
    
    
    
    
    def String extractVtypesValue(String typeString) {
	    // Get the string representation of TypeImpl
	    
	    // Split the string by whitespace and get the last part
	    val parts = typeString.split("\\s+")
		val vtypesPart = parts.last	
	    // Extract the content between the parentheses
	    return vtypesPart.substring(0, vtypesPart.length() - 1)
	}
	
	//generating ressources folder  
	
	
	
	
	//generating the static class
	def generateMainClass(IFileSystemAccess2 fsa,Resource input){
		val projectNameHolder = new ArrayList<String>()
    	input.allContents.forEach[element|
    		if(element instanceof Sboot){
 			projectNameHolder.add(element.nom);    		}
    	]
    	val projectName=projectNameHolder.get(0)
			val content2= '''
    package com.springboot.«projectName»;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class «projectName.toFirstUpper»Application {

        public static void main(String[] args) {
            SpringApplication.run(«projectName.toFirstUpper»Application.class, args);
        }
    }
'''
	
	val fpath="src/main/java/com/springboot/"+projectName+"/"+projectName.toFirstUpper+".java"
	fsa.generateFile(fpath,content2)
		
	}





    
    def String getSimpleTypeName(Type type) {
	     if (type instanceof ListType) {
	        return "List<" + getSimpleTypeName(type.type) + ">"
	    } else if (type instanceof SetType) {
	        return "Set<" + getSimpleTypeName(type.type) + ">"
	    } else if (type instanceof RType) {
	        return type.vypes.toString
	    } else {
	        return extractVtypesValue(type.toString())
	    }
 }
 
 
 
 
	def generateEntityClass(Entity entity, IFileSystemAccess2 fsa,Resource input) {
    	val projectNameHolder = new ArrayList<String>()
    	input.allContents.forEach[element|
    		if(element instanceof Sboot){
 			projectNameHolder.add(element.nom);    		}
    	]
    	val projectName=projectNameHolder.get(0)
        val className = entity.nom;
        val properties = entity.properties;
        val extendsClause=entity.extends;

        val content = '''
    package com.springboot.«projectName».entities;

    import jakarta.persistence.Entity;
    import jakarta.persistence.Table;
    import lombok.Builder;

    @Entity
    @Table(name = "«className»")
    @Builder
    public class «className» «IF extendsClause !== null»extends «extendsClause» «ENDIF»{
        «FOR property : properties»
            private «getSimpleTypeName(property.type)» «property.nom»;
        «ENDFOR»

        «FOR property : properties»
            public «getSimpleTypeName(property.type)» get«property.nom.toFirstUpper»() {
                return «property.nom»;
            }

            public void set«property.nom.toFirstUpper»(«getSimpleTypeName(property.type)» «property.nom») {
                this.«property.nom» = «property.nom»;
            }
        «ENDFOR»
    }
''';
	

        val folderPath = "C:Users/Dell/Downloads/projectName/src/main/java/com/springboot/"+projectName+"/entities";
        val filePath = folderPath + "/" + className + ".java";
        
        fsa.generateFile(filePath, content);
        
    }
}
