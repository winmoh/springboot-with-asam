/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.asam.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.asam.asam.Entity

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AsamGenerator extends AbstractGenerator {

	//override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
//	}
	override void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val outputFolder = "src-gen/entities"; // Change this to your desired output folder
        fsa.generateFile("entities/.gitkeep", "");
    }

    override void doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
        input.allContents.forEach[ element |
            if (element instanceof Entity) {
                generateEntityClass(element as Entity, fsa);
            }
        ]
    }

    def generateEntityClass(Entity entity, IFileSystemAccess2 fsa) {
        val className = entity.nom;
        val properties = entity.properties;

        val content = '''
            package your.package.name.entities;

            public class «className» {
                «FOR property : properties»
                    private «property.type» «property.nom»;
                «ENDFOR»

                «FOR property : properties»
                    public «property.type» get«property.nom.toFirstUpper»() {
                        return «property.nom»;
                    }

                    public void set«property.nom.toFirstUpper»(«property.type» «property.nom») {
                        this.«property.nom» = «property.nom»;
                    }
                «ENDFOR»
            }
        ''';
       
        val folderPath = "src-gen/entities";
        val filePath = folderPath + "/" + className + ".java";
        
        fsa.generateFile(filePath, content);
    }
}
