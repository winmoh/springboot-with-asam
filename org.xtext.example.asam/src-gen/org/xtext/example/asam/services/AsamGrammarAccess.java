/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.asam.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AsamGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SbootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Sboot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Assignment cConfigurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConfigurationConfigurationParserRuleCall_2_0 = (RuleCall)cConfigurationAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//Sboot:
		//    'project' nom=ID
		//    configuration=Configuration?
		//    elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//'project' nom=ID
		//configuration=Configuration?
		//elements+=Element*
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//configuration=Configuration?
		public Assignment getConfigurationAssignment_2() { return cConfigurationAssignment_2; }
		
		//Configuration
		public RuleCall getConfigurationConfigurationParserRuleCall_2_0() { return cConfigurationConfigurationParserRuleCall_2_0; }
		
		//elements+=Element*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_3_0() { return cElementsElementParserRuleCall_3_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cServiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDTOParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRepositoryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEntityRelationshipParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Element:
		//    Entity | Service  | DTO | Repository | EntityRelationship ;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Service  | DTO | Repository | EntityRelationship
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Service
		public RuleCall getServiceParserRuleCall_1() { return cServiceParserRuleCall_1; }
		
		//DTO
		public RuleCall getDTOParserRuleCall_2() { return cDTOParserRuleCall_2; }
		
		//Repository
		public RuleCall getRepositoryParserRuleCall_3() { return cRepositoryParserRuleCall_3; }
		
		//EntityRelationship
		public RuleCall getEntityRelationshipParserRuleCall_4() { return cEntityRelationshipParserRuleCall_4; }
	}
	public class EntityRelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.EntityRelationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDbRelationsEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cBetweenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceEntityCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cAndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetEntityCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetEntityIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetEntityCrossReference_5_0.eContents().get(1);
		
		//EntityRelationship:
		//    'relation' type=dbRelations 'between' source=[Entity] 'and' target=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' type=dbRelations 'between' source=[Entity] 'and' target=[Entity]
		public Group getGroup() { return cGroup; }
		
		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//type=dbRelations
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//dbRelations
		public RuleCall getTypeDbRelationsEnumRuleCall_1_0() { return cTypeDbRelationsEnumRuleCall_1_0; }
		
		//'between'
		public Keyword getBetweenKeyword_2() { return cBetweenKeyword_2; }
		
		//source=[Entity]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[Entity]
		public CrossReference getSourceEntityCrossReference_3_0() { return cSourceEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceEntityIDTerminalRuleCall_3_0_1() { return cSourceEntityIDTerminalRuleCall_3_0_1; }
		
		//'and'
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }
		
		//target=[Entity]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[Entity]
		public CrossReference getTargetEntityCrossReference_5_0() { return cTargetEntityCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetEntityIDTerminalRuleCall_5_0_1() { return cTargetEntityIDTerminalRuleCall_5_0_1; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cServerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cServerServerInfoParserRuleCall_2_0 = (RuleCall)cServerAssignment_2.eContents().get(0);
		private final Assignment cDatabaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatabaseDatabaseInfoParserRuleCall_3_0 = (RuleCall)cDatabaseAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////java.lang.IllegalArgumentException: The sources EClass 'Entity' does not expose the feature 'ActionParameter.nom'
		//Configuration:
		//    'config' '{'
		//        server=ServerInfo?
		//        database=DatabaseInfo
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'config' '{'
		//    server=ServerInfo?
		//    database=DatabaseInfo
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//server=ServerInfo?
		public Assignment getServerAssignment_2() { return cServerAssignment_2; }
		
		//ServerInfo
		public RuleCall getServerServerInfoParserRuleCall_2_0() { return cServerServerInfoParserRuleCall_2_0; }
		
		//database=DatabaseInfo
		public Assignment getDatabaseAssignment_3() { return cDatabaseAssignment_3; }
		
		//DatabaseInfo
		public RuleCall getDatabaseDatabaseInfoParserRuleCall_3_0() { return cDatabaseDatabaseInfoParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ServerInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.ServerInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPortKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPortINTTerminalRuleCall_2_1_0 = (RuleCall)cPortAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCpathKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPathAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPathPATHTerminalRuleCall_3_1_0 = (RuleCall)cPathAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ServerInfo:
		//    'server' '{'
		//        ('port' port=INT)
		//        ('cpath' path=PATH)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'server' '{'
		//    ('port' port=INT)
		//    ('cpath' path=PATH)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'server'
		public Keyword getServerKeyword_0() { return cServerKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('port' port=INT)
		public Group getGroup_2() { return cGroup_2; }
		
		//'port'
		public Keyword getPortKeyword_2_0() { return cPortKeyword_2_0; }
		
		//port=INT
		public Assignment getPortAssignment_2_1() { return cPortAssignment_2_1; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_2_1_0() { return cPortINTTerminalRuleCall_2_1_0; }
		
		//('cpath' path=PATH)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'cpath'
		public Keyword getCpathKeyword_3_0() { return cCpathKeyword_3_0; }
		
		//path=PATH
		public Assignment getPathAssignment_3_1() { return cPathAssignment_3_1; }
		
		//PATH
		public RuleCall getPathPATHTerminalRuleCall_3_1_0() { return cPathPATHTerminalRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DatabaseInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.DatabaseInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDbmsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeRDBMSEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cDnameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNomAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNomIDTerminalRuleCall_5_0 = (RuleCall)cNomAssignment_5.eContents().get(0);
		private final Keyword cDportKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPortAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPortINTTerminalRuleCall_7_0 = (RuleCall)cPortAssignment_7.eContents().get(0);
		private final Keyword cUsernameKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cUsernameAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cUsernameIDTerminalRuleCall_9_0 = (RuleCall)cUsernameAssignment_9.eContents().get(0);
		private final Keyword cPasswordKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPasswordAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPasswordIDTerminalRuleCall_11_0 = (RuleCall)cPasswordAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//DatabaseInfo:
		//    'database' '{'
		//        'dbms' type=RDBMS
		//        'dname' nom=ID
		//        'dport' port=INT
		//        'username' username=ID
		//        'password' password=ID
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'database' '{'
		//    'dbms' type=RDBMS
		//    'dname' nom=ID
		//    'dport' port=INT
		//    'username' username=ID
		//    'password' password=ID
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'database'
		public Keyword getDatabaseKeyword_0() { return cDatabaseKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'dbms'
		public Keyword getDbmsKeyword_2() { return cDbmsKeyword_2; }
		
		//type=RDBMS
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//RDBMS
		public RuleCall getTypeRDBMSEnumRuleCall_3_0() { return cTypeRDBMSEnumRuleCall_3_0; }
		
		//'dname'
		public Keyword getDnameKeyword_4() { return cDnameKeyword_4; }
		
		//nom=ID
		public Assignment getNomAssignment_5() { return cNomAssignment_5; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_5_0() { return cNomIDTerminalRuleCall_5_0; }
		
		//'dport'
		public Keyword getDportKeyword_6() { return cDportKeyword_6; }
		
		//port=INT
		public Assignment getPortAssignment_7() { return cPortAssignment_7; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_7_0() { return cPortINTTerminalRuleCall_7_0; }
		
		//'username'
		public Keyword getUsernameKeyword_8() { return cUsernameKeyword_8; }
		
		//username=ID
		public Assignment getUsernameAssignment_9() { return cUsernameAssignment_9; }
		
		//ID
		public RuleCall getUsernameIDTerminalRuleCall_9_0() { return cUsernameIDTerminalRuleCall_9_0; }
		
		//'password'
		public Keyword getPasswordKeyword_10() { return cPasswordKeyword_10; }
		
		//password=ID
		public Assignment getPasswordAssignment_11() { return cPasswordAssignment_11; }
		
		//ID
		public RuleCall getPasswordIDTerminalRuleCall_11_0() { return cPasswordIDTerminalRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInheritsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsEntityCrossReference_2_1_0 = (CrossReference)cExtendsAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendsEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdentIdentifierParserRuleCall_4_0 = (RuleCall)cIdentAssignment_4.eContents().get(0);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Assignment cRepoAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRepoRepositoryParserRuleCall_6_0 = (RuleCall)cRepoAssignment_6.eContents().get(0);
		private final Assignment cControlAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cControlControllerParserRuleCall_7_0 = (RuleCall)cControlAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Entity:
		//    'entity' nom=ID ('inherits' extends=[Entity])? '{'
		//        ident=Identifier
		//        properties+=Property*
		//        repo=Repository?
		//        control=Controller
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' nom=ID ('inherits' extends=[Entity])? '{'
		//    ident=Identifier
		//    properties+=Property*
		//    repo=Repository?
		//    control=Controller
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//('inherits' extends=[Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'inherits'
		public Keyword getInheritsKeyword_2_0() { return cInheritsKeyword_2_0; }
		
		//extends=[Entity]
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }
		
		//[Entity]
		public CrossReference getExtendsEntityCrossReference_2_1_0() { return cExtendsEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExtendsEntityIDTerminalRuleCall_2_1_0_1() { return cExtendsEntityIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//ident=Identifier
		public Assignment getIdentAssignment_4() { return cIdentAssignment_4; }
		
		//Identifier
		public RuleCall getIdentIdentifierParserRuleCall_4_0() { return cIdentIdentifierParserRuleCall_4_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0() { return cPropertiesPropertyParserRuleCall_5_0; }
		
		//repo=Repository?
		public Assignment getRepoAssignment_6() { return cRepoAssignment_6; }
		
		//Repository
		public RuleCall getRepoRepositoryParserRuleCall_6_0() { return cRepoRepositoryParserRuleCall_6_0; }
		
		//control=Controller
		public Assignment getControlAssignment_7() { return cControlAssignment_7; }
		
		//Controller
		public RuleCall getControlControllerParserRuleCall_7_0() { return cControlControllerParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVTypesEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Identifier:
		//    'Id' nom=ID type=VTypes
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Id' nom=ID type=VTypes
		public Group getGroup() { return cGroup; }
		
		//'Id'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//type=VTypes
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//VTypes
		public RuleCall getTypeVTypesEnumRuleCall_2_0() { return cTypeVTypesEnumRuleCall_2_0; }
	}
	public class DTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.DTO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DTO:
		//    'dto' nom=ID '{'
		//        properties+=Property*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'dto' nom=ID '{'
		//    properties+=Property*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'dto'
		public Keyword getDtoKeyword_0() { return cDtoKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cPertainingToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityEntityCrossReference_3_0 = (CrossReference)cEntityAssignment_3.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cEntityEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsServiceActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Service:
		//    'service' nom=ID 'pertainingTo' entity=[Entity] '{'
		//        actions+=ServiceAction*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'service' nom=ID 'pertainingTo' entity=[Entity] '{'
		//    actions+=ServiceAction*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'pertainingTo'
		public Keyword getPertainingToKeyword_2() { return cPertainingToKeyword_2; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_3_0() { return cEntityEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_3_0_1() { return cEntityEntityIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//actions+=ServiceAction*
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//ServiceAction
		public RuleCall getActionsServiceActionParserRuleCall_5_0() { return cActionsServiceActionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMappingToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityEntityCrossReference_2_0 = (CrossReference)cEntityAssignment_2.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityEntityCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBaseUrlAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBaseUrlPATHTerminalRuleCall_4_0 = (RuleCall)cBaseUrlAssignment_4.eContents().get(0);
		private final Assignment cCactionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCactionsCustomActionParserRuleCall_5_0 = (RuleCall)cCactionsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCreateKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEntityKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cCparamAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cCparamParamTrasfertEnumRuleCall_6_2_0 = (RuleCall)cCparamAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFindKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEntityKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFparamAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFparamParamTrasfertEnumRuleCall_7_2_0 = (RuleCall)cFparamAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDeleteKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cEntityKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cDparamAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cDparamParamTrasfertEnumRuleCall_8_2_0 = (RuleCall)cDparamAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Controller:
		//    'controller' 'mappingTo' entity=[Entity] '{'
		//        baseUrl=PATH?
		//        cactions+=CustomAction*
		//        ('create' 'entity:' cparam=ParamTrasfert )?
		//        ('find' 'entity:' fparam=ParamTrasfert)?
		//        ('delete' 'entity:' dparam=ParamTrasfert)?
		//     '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'controller' 'mappingTo' entity=[Entity] '{'
		//    baseUrl=PATH?
		//    cactions+=CustomAction*
		//    ('create' 'entity:' cparam=ParamTrasfert )?
		//    ('find' 'entity:' fparam=ParamTrasfert)?
		//    ('delete' 'entity:' dparam=ParamTrasfert)?
		// '}'
		public Group getGroup() { return cGroup; }
		
		//'controller'
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }
		
		//'mappingTo'
		public Keyword getMappingToKeyword_1() { return cMappingToKeyword_1; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_0() { return cEntityEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_0_1() { return cEntityEntityIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//baseUrl=PATH?
		public Assignment getBaseUrlAssignment_4() { return cBaseUrlAssignment_4; }
		
		//PATH
		public RuleCall getBaseUrlPATHTerminalRuleCall_4_0() { return cBaseUrlPATHTerminalRuleCall_4_0; }
		
		//cactions+=CustomAction*
		public Assignment getCactionsAssignment_5() { return cCactionsAssignment_5; }
		
		//CustomAction
		public RuleCall getCactionsCustomActionParserRuleCall_5_0() { return cCactionsCustomActionParserRuleCall_5_0; }
		
		//('create' 'entity:' cparam=ParamTrasfert )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'create'
		public Keyword getCreateKeyword_6_0() { return cCreateKeyword_6_0; }
		
		//'entity:'
		public Keyword getEntityKeyword_6_1() { return cEntityKeyword_6_1; }
		
		//cparam=ParamTrasfert
		public Assignment getCparamAssignment_6_2() { return cCparamAssignment_6_2; }
		
		//ParamTrasfert
		public RuleCall getCparamParamTrasfertEnumRuleCall_6_2_0() { return cCparamParamTrasfertEnumRuleCall_6_2_0; }
		
		//('find' 'entity:' fparam=ParamTrasfert)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'find'
		public Keyword getFindKeyword_7_0() { return cFindKeyword_7_0; }
		
		//'entity:'
		public Keyword getEntityKeyword_7_1() { return cEntityKeyword_7_1; }
		
		//fparam=ParamTrasfert
		public Assignment getFparamAssignment_7_2() { return cFparamAssignment_7_2; }
		
		//ParamTrasfert
		public RuleCall getFparamParamTrasfertEnumRuleCall_7_2_0() { return cFparamParamTrasfertEnumRuleCall_7_2_0; }
		
		//('delete' 'entity:' dparam=ParamTrasfert)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'delete'
		public Keyword getDeleteKeyword_8_0() { return cDeleteKeyword_8_0; }
		
		//'entity:'
		public Keyword getEntityKeyword_8_1() { return cEntityKeyword_8_1; }
		
		//dparam=ParamTrasfert
		public Assignment getDparamAssignment_8_2() { return cDparamAssignment_8_2; }
		
		//ParamTrasfert
		public RuleCall getDparamParamTrasfertEnumRuleCall_8_2_0() { return cDparamParamTrasfertEnumRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ServiceActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.ServiceAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReturnsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeRTypeParserRuleCall_4_0 = (RuleCall)cReturnTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRaisesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExceptionTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExceptionTypeTypeParserRuleCall_5_1_0 = (RuleCall)cExceptionTypeAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cImplementationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cImplementationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cImplementationSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cImplementationAssignment_6_1.eContents().get(0);
		private final Keyword cParamsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cParametersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cParametersActionParameterParserRuleCall_9_0 = (RuleCall)cParametersAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ServiceAction:
		//    'operation' nom=ID '{'
		//        'returns' returnType=RType
		//        ('raises' exceptionType=Type)?
		//        ('implementation' implementation=STRING)?
		//        'params' '(' (parameters+=ActionParameter)* ')'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' nom=ID '{'
		//    'returns' returnType=RType
		//    ('raises' exceptionType=Type)?
		//    ('implementation' implementation=STRING)?
		//    'params' '(' (parameters+=ActionParameter)* ')'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'returns'
		public Keyword getReturnsKeyword_3() { return cReturnsKeyword_3; }
		
		//returnType=RType
		public Assignment getReturnTypeAssignment_4() { return cReturnTypeAssignment_4; }
		
		//RType
		public RuleCall getReturnTypeRTypeParserRuleCall_4_0() { return cReturnTypeRTypeParserRuleCall_4_0; }
		
		//('raises' exceptionType=Type)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'raises'
		public Keyword getRaisesKeyword_5_0() { return cRaisesKeyword_5_0; }
		
		//exceptionType=Type
		public Assignment getExceptionTypeAssignment_5_1() { return cExceptionTypeAssignment_5_1; }
		
		//Type
		public RuleCall getExceptionTypeTypeParserRuleCall_5_1_0() { return cExceptionTypeTypeParserRuleCall_5_1_0; }
		
		//('implementation' implementation=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'implementation'
		public Keyword getImplementationKeyword_6_0() { return cImplementationKeyword_6_0; }
		
		//implementation=STRING
		public Assignment getImplementationAssignment_6_1() { return cImplementationAssignment_6_1; }
		
		//STRING
		public RuleCall getImplementationSTRINGTerminalRuleCall_6_1_0() { return cImplementationSTRINGTerminalRuleCall_6_1_0; }
		
		//'params'
		public Keyword getParamsKeyword_7() { return cParamsKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//(parameters+=ActionParameter)*
		public Assignment getParametersAssignment_9() { return cParametersAssignment_9; }
		
		//ActionParameter
		public RuleCall getParametersActionParameterParserRuleCall_9_0() { return cParametersActionParameterParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class CustomActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.CustomAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMethodHttpMethodsEnumRuleCall_0_0 = (RuleCall)cMethodAssignment_0.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomIDTerminalRuleCall_2_0 = (RuleCall)cNomAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMappedAtKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUrlAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cUrlAssignment_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersActionParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CustomAction:
		//    method=HttpMethods 'action' nom=ID '{'
		//        ('mappedAt' url=STRING)?
		//        parameters+=ActionParameter*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//method=HttpMethods 'action' nom=ID '{'
		//    ('mappedAt' url=STRING)?
		//    parameters+=ActionParameter*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//method=HttpMethods
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }
		
		//HttpMethods
		public RuleCall getMethodHttpMethodsEnumRuleCall_0_0() { return cMethodHttpMethodsEnumRuleCall_0_0; }
		
		//'action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//nom=ID
		public Assignment getNomAssignment_2() { return cNomAssignment_2; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_2_0() { return cNomIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('mappedAt' url=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'mappedAt'
		public Keyword getMappedAtKeyword_4_0() { return cMappedAtKeyword_4_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_4_1() { return cUrlAssignment_4_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_4_1_0() { return cUrlSTRINGTerminalRuleCall_4_1_0; }
		
		//parameters+=ActionParameter*
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//ActionParameter
		public RuleCall getParametersActionParameterParserRuleCall_5_0() { return cParametersActionParameterParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ActionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.ActionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNomAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNomIDTerminalRuleCall_0_0 = (RuleCall)cNomAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefaultKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		
		//ActionParameter:
		//    nom=ID ':' type=Type ('default' defaultValue=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//nom=ID ':' type=Type ('default' defaultValue=STRING)?
		public Group getGroup() { return cGroup; }
		
		//nom=ID
		public Assignment getNomAssignment_0() { return cNomAssignment_0; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_0_0() { return cNomIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//('default' defaultValue=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'default'
		public Keyword getDefaultKeyword_3_0() { return cDefaultKeyword_3_0; }
		
		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }
		
		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_3_1_0() { return cDefaultValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class RepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Repository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFindByAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFindByFindByMethodParserRuleCall_2_0 = (RuleCall)cFindByAssignment_2.eContents().get(0);
		private final Assignment cDeleteByAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeleteByDeleteByMethodParserRuleCall_3_0 = (RuleCall)cDeleteByAssignment_3.eContents().get(0);
		private final Assignment cCustomQueryMethodAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCustomQueryMethodCustomQueryMethodParserRuleCall_4_0 = (RuleCall)cCustomQueryMethodAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Repository:
		//    'repository'  '{'
		//        findBy+=FindByMethod*
		//        deleteBy+=DeleteByMethod*
		//        customQueryMethod+=CustomQueryMethod*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'repository'  '{'
		//    findBy+=FindByMethod*
		//    deleteBy+=DeleteByMethod*
		//    customQueryMethod+=CustomQueryMethod*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'repository'
		public Keyword getRepositoryKeyword_0() { return cRepositoryKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//findBy+=FindByMethod*
		public Assignment getFindByAssignment_2() { return cFindByAssignment_2; }
		
		//FindByMethod
		public RuleCall getFindByFindByMethodParserRuleCall_2_0() { return cFindByFindByMethodParserRuleCall_2_0; }
		
		//deleteBy+=DeleteByMethod*
		public Assignment getDeleteByAssignment_3() { return cDeleteByAssignment_3; }
		
		//DeleteByMethod
		public RuleCall getDeleteByDeleteByMethodParserRuleCall_3_0() { return cDeleteByDeleteByMethodParserRuleCall_3_0; }
		
		//customQueryMethod+=CustomQueryMethod*
		public Assignment getCustomQueryMethodAssignment_4() { return cCustomQueryMethodAssignment_4; }
		
		//CustomQueryMethod
		public RuleCall getCustomQueryMethodCustomQueryMethodParserRuleCall_4_0() { return cCustomQueryMethodCustomQueryMethodParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FindByMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.FindByMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPtypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPtypeVTypesEnumRuleCall_4_0 = (RuleCall)cPtypeAssignment_4.eContents().get(0);
		
		//FindByMethod:
		//    'find' 'by' property=ID':' ptype=VTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//'find' 'by' property=ID':' ptype=VTypes
		public Group getGroup() { return cGroup; }
		
		//'find'
		public Keyword getFindKeyword_0() { return cFindKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//property=ID
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_2_0() { return cPropertyIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//ptype=VTypes
		public Assignment getPtypeAssignment_4() { return cPtypeAssignment_4; }
		
		//VTypes
		public RuleCall getPtypeVTypesEnumRuleCall_4_0() { return cPtypeVTypesEnumRuleCall_4_0; }
	}
	public class DeleteByMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.DeleteByMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPtypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPtypeVTypesEnumRuleCall_4_0 = (RuleCall)cPtypeAssignment_4.eContents().get(0);
		
		// //('And' prop=ID)?;
		//DeleteByMethod:
		//    'delete' 'by' property=ID':' ptype=VTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' 'by' property=ID':' ptype=VTypes
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//property=ID
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_2_0() { return cPropertyIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//ptype=VTypes
		public Assignment getPtypeAssignment_4() { return cPtypeAssignment_4; }
		
		//VTypes
		public RuleCall getPtypeVTypesEnumRuleCall_4_0() { return cPtypeVTypesEnumRuleCall_4_0; }
	}
	public class CustomQueryMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.CustomQueryMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuerySTRINGTerminalRuleCall_2_0 = (RuleCall)cQueryAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		// //('And' prop=ID)?;
		//CustomQueryMethod:
		//    'customQuery' '{' query=STRING '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'customQuery' '{' query=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'customQuery'
		public Keyword getCustomQueryKeyword_0() { return cCustomQueryKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//query=STRING
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }
		
		//STRING
		public RuleCall getQuerySTRINGTerminalRuleCall_2_0() { return cQuerySTRINGTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNomAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNomIDTerminalRuleCall_0_0 = (RuleCall)cNomAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefaultKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		
		//Property:
		//    nom=ID ':' type=Type ('default' defaultValue=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//nom=ID ':' type=Type ('default' defaultValue=STRING)?
		public Group getGroup() { return cGroup; }
		
		//nom=ID
		public Assignment getNomAssignment_0() { return cNomAssignment_0; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_0_0() { return cNomIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//('default' defaultValue=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'default'
		public Keyword getDefaultKeyword_3_0() { return cDefaultKeyword_3_0; }
		
		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }
		
		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_3_1_0() { return cDefaultValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVtypesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVtypesVTypesEnumRuleCall_0_0 = (RuleCall)cVtypesAssignment_0.eContents().get(0);
		private final RuleCall cListTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//    Vtypes=VTypes | ListType | SetType;
		@Override public ParserRule getRule() { return rule; }
		
		//Vtypes=VTypes | ListType | SetType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Vtypes=VTypes
		public Assignment getVtypesAssignment_0() { return cVtypesAssignment_0; }
		
		//VTypes
		public RuleCall getVtypesVTypesEnumRuleCall_0_0() { return cVtypesVTypesEnumRuleCall_0_0; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_1() { return cListTypeParserRuleCall_1; }
		
		//SetType
		public RuleCall getSetTypeParserRuleCall_2() { return cSetTypeParserRuleCall_2; }
	}
	public class RTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.RType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVypesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVypesVTypesEnumRuleCall_0_0 = (RuleCall)cVypesAssignment_0.eContents().get(0);
		private final RuleCall cListTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RType:
		//    Vypes=VTypes | ListType | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//Vypes=VTypes | ListType | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Vypes=VTypes
		public Assignment getVypesAssignment_0() { return cVypesAssignment_0; }
		
		//VTypes
		public RuleCall getVypesVTypesEnumRuleCall_0_0() { return cVypesVTypesEnumRuleCall_0_0; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_1() { return cListTypeParserRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ListType: 'List<' type=Type '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'List<' type=Type '>'
		public Group getGroup() { return cGroup; }
		
		//'List<'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class SetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.SetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SetType: 'Set<' type=Type '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'Set<' type=Type '>'
		public Group getGroup() { return cGroup; }
		
		//'Set<'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	
	public class VTypesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.VTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFLOATFloatKeyword_0_0 = (Keyword)cFLOATEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLONGLongKeyword_1_0 = (Keyword)cLONGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERIntKeyword_2_0 = (Keyword)cINTEGEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCHARCharKeyword_3_0 = (Keyword)cCHAREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBOOLEANBooleanKeyword_4_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBYTEByteKeyword_5_0 = (Keyword)cBYTEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSTRINGStringKeyword_6_0 = (Keyword)cSTRINGEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum VTypes  : FLOAT='float' | LONG="long" | INTEGER="int" | CHAR="char" | BOOLEAN="boolean" | BYTE="byte" | STRING="String";
		public EnumRule getRule() { return rule; }
		
		//FLOAT='float' | LONG="long" | INTEGER="int" | CHAR="char" | BOOLEAN="boolean" | BYTE="byte" | STRING="String"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FLOAT='float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_0() { return cFLOATEnumLiteralDeclaration_0; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_0_0() { return cFLOATFloatKeyword_0_0; }
		
		//LONG="long"
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_1() { return cLONGEnumLiteralDeclaration_1; }
		
		//"long"
		public Keyword getLONGLongKeyword_1_0() { return cLONGLongKeyword_1_0; }
		
		//INTEGER="int"
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_2() { return cINTEGEREnumLiteralDeclaration_2; }
		
		//"int"
		public Keyword getINTEGERIntKeyword_2_0() { return cINTEGERIntKeyword_2_0; }
		
		//CHAR="char"
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_3() { return cCHAREnumLiteralDeclaration_3; }
		
		//"char"
		public Keyword getCHARCharKeyword_3_0() { return cCHARCharKeyword_3_0; }
		
		//BOOLEAN="boolean"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_4() { return cBOOLEANEnumLiteralDeclaration_4; }
		
		//"boolean"
		public Keyword getBOOLEANBooleanKeyword_4_0() { return cBOOLEANBooleanKeyword_4_0; }
		
		//BYTE="byte"
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_5() { return cBYTEEnumLiteralDeclaration_5; }
		
		//"byte"
		public Keyword getBYTEByteKeyword_5_0() { return cBYTEByteKeyword_5_0; }
		
		//STRING="String"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_6() { return cSTRINGEnumLiteralDeclaration_6; }
		
		//"String"
		public Keyword getSTRINGStringKeyword_6_0() { return cSTRINGStringKeyword_6_0; }
	}
	public class HttpMethodsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.HttpMethods");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGETGetKeyword_0_0 = (Keyword)cGETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDELETEDeleteKeyword_1_0 = (Keyword)cDELETEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPOSTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPOSTPostKeyword_2_0 = (Keyword)cPOSTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPUTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPUTPutKeyword_3_0 = (Keyword)cPUTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPATCHEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPATCHPatchKeyword_4_0 = (Keyword)cPATCHEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum HttpMethods: GET="Get" | DELETE="Delete" | POST="Post" | PUT="Put" | PATCH="Patch";
		public EnumRule getRule() { return rule; }
		
		//GET="Get" | DELETE="Delete" | POST="Post" | PUT="Put" | PATCH="Patch"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GET="Get"
		public EnumLiteralDeclaration getGETEnumLiteralDeclaration_0() { return cGETEnumLiteralDeclaration_0; }
		
		//"Get"
		public Keyword getGETGetKeyword_0_0() { return cGETGetKeyword_0_0; }
		
		//DELETE="Delete"
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_1() { return cDELETEEnumLiteralDeclaration_1; }
		
		//"Delete"
		public Keyword getDELETEDeleteKeyword_1_0() { return cDELETEDeleteKeyword_1_0; }
		
		//POST="Post"
		public EnumLiteralDeclaration getPOSTEnumLiteralDeclaration_2() { return cPOSTEnumLiteralDeclaration_2; }
		
		//"Post"
		public Keyword getPOSTPostKeyword_2_0() { return cPOSTPostKeyword_2_0; }
		
		//PUT="Put"
		public EnumLiteralDeclaration getPUTEnumLiteralDeclaration_3() { return cPUTEnumLiteralDeclaration_3; }
		
		//"Put"
		public Keyword getPUTPutKeyword_3_0() { return cPUTPutKeyword_3_0; }
		
		//PATCH="Patch"
		public EnumLiteralDeclaration getPATCHEnumLiteralDeclaration_4() { return cPATCHEnumLiteralDeclaration_4; }
		
		//"Patch"
		public Keyword getPATCHPatchKeyword_4_0() { return cPATCHPatchKeyword_4_0; }
	}
	public class RDBMSElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.RDBMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMYSQLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMYSQLMysqlKeyword_0_0 = (Keyword)cMYSQLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPOSTGRESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPOSTGRESPostgresKeyword_1_0 = (Keyword)cPOSTGRESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMARIADBEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMARIADBMariadbKeyword_2_0 = (Keyword)cMARIADBEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cH2EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cH2H2Keyword_3_0 = (Keyword)cH2EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cORACLEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cORACLEOracleKeyword_4_0 = (Keyword)cORACLEEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum RDBMS: MYSQL="Mysql" | POSTGRES="Postgres" | MARIADB="Mariadb" | H2="h2" | ORACLE="Oracle";
		public EnumRule getRule() { return rule; }
		
		//MYSQL="Mysql" | POSTGRES="Postgres" | MARIADB="Mariadb" | H2="h2" | ORACLE="Oracle"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MYSQL="Mysql"
		public EnumLiteralDeclaration getMYSQLEnumLiteralDeclaration_0() { return cMYSQLEnumLiteralDeclaration_0; }
		
		//"Mysql"
		public Keyword getMYSQLMysqlKeyword_0_0() { return cMYSQLMysqlKeyword_0_0; }
		
		//POSTGRES="Postgres"
		public EnumLiteralDeclaration getPOSTGRESEnumLiteralDeclaration_1() { return cPOSTGRESEnumLiteralDeclaration_1; }
		
		//"Postgres"
		public Keyword getPOSTGRESPostgresKeyword_1_0() { return cPOSTGRESPostgresKeyword_1_0; }
		
		//MARIADB="Mariadb"
		public EnumLiteralDeclaration getMARIADBEnumLiteralDeclaration_2() { return cMARIADBEnumLiteralDeclaration_2; }
		
		//"Mariadb"
		public Keyword getMARIADBMariadbKeyword_2_0() { return cMARIADBMariadbKeyword_2_0; }
		
		//H2="h2"
		public EnumLiteralDeclaration getH2EnumLiteralDeclaration_3() { return cH2EnumLiteralDeclaration_3; }
		
		//"h2"
		public Keyword getH2H2Keyword_3_0() { return cH2H2Keyword_3_0; }
		
		//ORACLE="Oracle"
		public EnumLiteralDeclaration getORACLEEnumLiteralDeclaration_4() { return cORACLEEnumLiteralDeclaration_4; }
		
		//"Oracle"
		public Keyword getORACLEOracleKeyword_4_0() { return cORACLEOracleKeyword_4_0; }
	}
	public class DbRelationsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.dbRelations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cM2MEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cM2MManyToManyKeyword_0_0 = (Keyword)cM2MEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cM2OEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cM2OManyToOneKeyword_1_0 = (Keyword)cM2OEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cO2MEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cO2MOneToManyKeyword_2_0 = (Keyword)cO2MEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum dbRelations: M2M="ManyToMany" | M2O="ManyToOne" | O2M="OneToMany";
		public EnumRule getRule() { return rule; }
		
		//M2M="ManyToMany" | M2O="ManyToOne" | O2M="OneToMany"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//M2M="ManyToMany"
		public EnumLiteralDeclaration getM2MEnumLiteralDeclaration_0() { return cM2MEnumLiteralDeclaration_0; }
		
		//"ManyToMany"
		public Keyword getM2MManyToManyKeyword_0_0() { return cM2MManyToManyKeyword_0_0; }
		
		//M2O="ManyToOne"
		public EnumLiteralDeclaration getM2OEnumLiteralDeclaration_1() { return cM2OEnumLiteralDeclaration_1; }
		
		//"ManyToOne"
		public Keyword getM2OManyToOneKeyword_1_0() { return cM2OManyToOneKeyword_1_0; }
		
		//O2M="OneToMany"
		public EnumLiteralDeclaration getO2MEnumLiteralDeclaration_2() { return cO2MEnumLiteralDeclaration_2; }
		
		//"OneToMany"
		public Keyword getO2MOneToManyKeyword_2_0() { return cO2MOneToManyKeyword_2_0; }
	}
	public class ParamTrasfertElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.ParamTrasfert");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRequestBodyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRequestBodyRequestBodyKeyword_0_0 = (Keyword)cRequestBodyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRequestParamEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRequestParamRequestParamKeyword_1_0 = (Keyword)cRequestParamEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPathVariableEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPathVariablePathVariableKeyword_2_0 = (Keyword)cPathVariableEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ParamTrasfert: RequestBody="RequestBody" | RequestParam="RequestParam" |PathVariable="PathVariable";
		public EnumRule getRule() { return rule; }
		
		//RequestBody="RequestBody" | RequestParam="RequestParam" |PathVariable="PathVariable"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RequestBody="RequestBody"
		public EnumLiteralDeclaration getRequestBodyEnumLiteralDeclaration_0() { return cRequestBodyEnumLiteralDeclaration_0; }
		
		//"RequestBody"
		public Keyword getRequestBodyRequestBodyKeyword_0_0() { return cRequestBodyRequestBodyKeyword_0_0; }
		
		//RequestParam="RequestParam"
		public EnumLiteralDeclaration getRequestParamEnumLiteralDeclaration_1() { return cRequestParamEnumLiteralDeclaration_1; }
		
		//"RequestParam"
		public Keyword getRequestParamRequestParamKeyword_1_0() { return cRequestParamRequestParamKeyword_1_0; }
		
		//PathVariable="PathVariable"
		public EnumLiteralDeclaration getPathVariableEnumLiteralDeclaration_2() { return cPathVariableEnumLiteralDeclaration_2; }
		
		//"PathVariable"
		public Keyword getPathVariablePathVariableKeyword_2_0() { return cPathVariablePathVariableKeyword_2_0; }
	}
	
	private final SbootElements pSboot;
	private final ElementElements pElement;
	private final EntityRelationshipElements pEntityRelationship;
	private final ConfigurationElements pConfiguration;
	private final ServerInfoElements pServerInfo;
	private final DatabaseInfoElements pDatabaseInfo;
	private final EntityElements pEntity;
	private final IdentifierElements pIdentifier;
	private final DTOElements pDTO;
	private final ServiceElements pService;
	private final ControllerElements pController;
	private final ServiceActionElements pServiceAction;
	private final CustomActionElements pCustomAction;
	private final ActionParameterElements pActionParameter;
	private final RepositoryElements pRepository;
	private final FindByMethodElements pFindByMethod;
	private final DeleteByMethodElements pDeleteByMethod;
	private final CustomQueryMethodElements pCustomQueryMethod;
	private final PropertyElements pProperty;
	private final TypeElements pType;
	private final RTypeElements pRType;
	private final ListTypeElements pListType;
	private final SetTypeElements pSetType;
	private final TerminalRule tPATH;
	private final VTypesElements eVTypes;
	private final HttpMethodsElements eHttpMethods;
	private final RDBMSElements eRDBMS;
	private final DbRelationsElements eDbRelations;
	private final ParamTrasfertElements eParamTrasfert;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AsamGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSboot = new SbootElements();
		this.pElement = new ElementElements();
		this.pEntityRelationship = new EntityRelationshipElements();
		this.pConfiguration = new ConfigurationElements();
		this.pServerInfo = new ServerInfoElements();
		this.pDatabaseInfo = new DatabaseInfoElements();
		this.pEntity = new EntityElements();
		this.pIdentifier = new IdentifierElements();
		this.pDTO = new DTOElements();
		this.pService = new ServiceElements();
		this.pController = new ControllerElements();
		this.pServiceAction = new ServiceActionElements();
		this.pCustomAction = new CustomActionElements();
		this.pActionParameter = new ActionParameterElements();
		this.pRepository = new RepositoryElements();
		this.pFindByMethod = new FindByMethodElements();
		this.pDeleteByMethod = new DeleteByMethodElements();
		this.pCustomQueryMethod = new CustomQueryMethodElements();
		this.pProperty = new PropertyElements();
		this.pType = new TypeElements();
		this.pRType = new RTypeElements();
		this.pListType = new ListTypeElements();
		this.pSetType = new SetTypeElements();
		this.tPATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.asam.Asam.PATH");
		this.eVTypes = new VTypesElements();
		this.eHttpMethods = new HttpMethodsElements();
		this.eRDBMS = new RDBMSElements();
		this.eDbRelations = new DbRelationsElements();
		this.eParamTrasfert = new ParamTrasfertElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.asam.Asam".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Sboot:
	//    'project' nom=ID
	//    configuration=Configuration?
	//    elements+=Element*;
	public SbootElements getSbootAccess() {
		return pSboot;
	}
	
	public ParserRule getSbootRule() {
		return getSbootAccess().getRule();
	}
	
	//Element:
	//    Entity | Service  | DTO | Repository | EntityRelationship ;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//EntityRelationship:
	//    'relation' type=dbRelations 'between' source=[Entity] 'and' target=[Entity];
	public EntityRelationshipElements getEntityRelationshipAccess() {
		return pEntityRelationship;
	}
	
	public ParserRule getEntityRelationshipRule() {
		return getEntityRelationshipAccess().getRule();
	}
	
	////java.lang.IllegalArgumentException: The sources EClass 'Entity' does not expose the feature 'ActionParameter.nom'
	//Configuration:
	//    'config' '{'
	//        server=ServerInfo?
	//        database=DatabaseInfo
	//    '}';
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//ServerInfo:
	//    'server' '{'
	//        ('port' port=INT)
	//        ('cpath' path=PATH)?
	//    '}';
	public ServerInfoElements getServerInfoAccess() {
		return pServerInfo;
	}
	
	public ParserRule getServerInfoRule() {
		return getServerInfoAccess().getRule();
	}
	
	//DatabaseInfo:
	//    'database' '{'
	//        'dbms' type=RDBMS
	//        'dname' nom=ID
	//        'dport' port=INT
	//        'username' username=ID
	//        'password' password=ID
	//    '}';
	public DatabaseInfoElements getDatabaseInfoAccess() {
		return pDatabaseInfo;
	}
	
	public ParserRule getDatabaseInfoRule() {
		return getDatabaseInfoAccess().getRule();
	}
	
	//Entity:
	//    'entity' nom=ID ('inherits' extends=[Entity])? '{'
	//        ident=Identifier
	//        properties+=Property*
	//        repo=Repository?
	//        control=Controller
	//    '}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Identifier:
	//    'Id' nom=ID type=VTypes
	//;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//DTO:
	//    'dto' nom=ID '{'
	//        properties+=Property*
	//    '}';
	public DTOElements getDTOAccess() {
		return pDTO;
	}
	
	public ParserRule getDTORule() {
		return getDTOAccess().getRule();
	}
	
	//Service:
	//    'service' nom=ID 'pertainingTo' entity=[Entity] '{'
	//        actions+=ServiceAction*
	//    '}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//Controller:
	//    'controller' 'mappingTo' entity=[Entity] '{'
	//        baseUrl=PATH?
	//        cactions+=CustomAction*
	//        ('create' 'entity:' cparam=ParamTrasfert )?
	//        ('find' 'entity:' fparam=ParamTrasfert)?
	//        ('delete' 'entity:' dparam=ParamTrasfert)?
	//     '}';
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}
	
	//ServiceAction:
	//    'operation' nom=ID '{'
	//        'returns' returnType=RType
	//        ('raises' exceptionType=Type)?
	//        ('implementation' implementation=STRING)?
	//        'params' '(' (parameters+=ActionParameter)* ')'
	//    '}';
	public ServiceActionElements getServiceActionAccess() {
		return pServiceAction;
	}
	
	public ParserRule getServiceActionRule() {
		return getServiceActionAccess().getRule();
	}
	
	//CustomAction:
	//    method=HttpMethods 'action' nom=ID '{'
	//        ('mappedAt' url=STRING)?
	//        parameters+=ActionParameter*
	//    '}';
	public CustomActionElements getCustomActionAccess() {
		return pCustomAction;
	}
	
	public ParserRule getCustomActionRule() {
		return getCustomActionAccess().getRule();
	}
	
	//ActionParameter:
	//    nom=ID ':' type=Type ('default' defaultValue=STRING)?;
	public ActionParameterElements getActionParameterAccess() {
		return pActionParameter;
	}
	
	public ParserRule getActionParameterRule() {
		return getActionParameterAccess().getRule();
	}
	
	//Repository:
	//    'repository'  '{'
	//        findBy+=FindByMethod*
	//        deleteBy+=DeleteByMethod*
	//        customQueryMethod+=CustomQueryMethod*
	//    '}';
	public RepositoryElements getRepositoryAccess() {
		return pRepository;
	}
	
	public ParserRule getRepositoryRule() {
		return getRepositoryAccess().getRule();
	}
	
	//FindByMethod:
	//    'find' 'by' property=ID':' ptype=VTypes;
	public FindByMethodElements getFindByMethodAccess() {
		return pFindByMethod;
	}
	
	public ParserRule getFindByMethodRule() {
		return getFindByMethodAccess().getRule();
	}
	
	// //('And' prop=ID)?;
	//DeleteByMethod:
	//    'delete' 'by' property=ID':' ptype=VTypes;
	public DeleteByMethodElements getDeleteByMethodAccess() {
		return pDeleteByMethod;
	}
	
	public ParserRule getDeleteByMethodRule() {
		return getDeleteByMethodAccess().getRule();
	}
	
	// //('And' prop=ID)?;
	//CustomQueryMethod:
	//    'customQuery' '{' query=STRING '}';
	public CustomQueryMethodElements getCustomQueryMethodAccess() {
		return pCustomQueryMethod;
	}
	
	public ParserRule getCustomQueryMethodRule() {
		return getCustomQueryMethodAccess().getRule();
	}
	
	//Property:
	//    nom=ID ':' type=Type ('default' defaultValue=STRING)?;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Type:
	//    Vtypes=VTypes | ListType | SetType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//RType:
	//    Vypes=VTypes | ListType | ID;
	public RTypeElements getRTypeAccess() {
		return pRType;
	}
	
	public ParserRule getRTypeRule() {
		return getRTypeAccess().getRule();
	}
	
	//ListType: 'List<' type=Type '>';
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}
	
	//SetType: 'Set<' type=Type '>';
	public SetTypeElements getSetTypeAccess() {
		return pSetType;
	}
	
	public ParserRule getSetTypeRule() {
		return getSetTypeAccess().getRule();
	}
	
	//terminal PATH: ('/' ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*)*;
	public TerminalRule getPATHRule() {
		return tPATH;
	}
	
	//enum VTypes  : FLOAT='float' | LONG="long" | INTEGER="int" | CHAR="char" | BOOLEAN="boolean" | BYTE="byte" | STRING="String";
	public VTypesElements getVTypesAccess() {
		return eVTypes;
	}
	
	public EnumRule getVTypesRule() {
		return getVTypesAccess().getRule();
	}
	
	//enum HttpMethods: GET="Get" | DELETE="Delete" | POST="Post" | PUT="Put" | PATCH="Patch";
	public HttpMethodsElements getHttpMethodsAccess() {
		return eHttpMethods;
	}
	
	public EnumRule getHttpMethodsRule() {
		return getHttpMethodsAccess().getRule();
	}
	
	//enum RDBMS: MYSQL="Mysql" | POSTGRES="Postgres" | MARIADB="Mariadb" | H2="h2" | ORACLE="Oracle";
	public RDBMSElements getRDBMSAccess() {
		return eRDBMS;
	}
	
	public EnumRule getRDBMSRule() {
		return getRDBMSAccess().getRule();
	}
	
	//enum dbRelations: M2M="ManyToMany" | M2O="ManyToOne" | O2M="OneToMany";
	public DbRelationsElements getDbRelationsAccess() {
		return eDbRelations;
	}
	
	public EnumRule getDbRelationsRule() {
		return getDbRelationsAccess().getRule();
	}
	
	//enum ParamTrasfert: RequestBody="RequestBody" | RequestParam="RequestParam" |PathVariable="PathVariable";
	public ParamTrasfertElements getParamTrasfertAccess() {
		return eParamTrasfert;
	}
	
	public EnumRule getParamTrasfertRule() {
		return getParamTrasfertAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
