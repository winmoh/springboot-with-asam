/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.asam.asam.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.asam.asam.ActionParameter;
import org.xtext.example.asam.asam.AsamPackage;
import org.xtext.example.asam.asam.RType;
import org.xtext.example.asam.asam.ServiceAction;
import org.xtext.example.asam.asam.Type;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Service Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.asam.asam.impl.ServiceActionImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ServiceActionImpl#getReturnType <em>Return Type</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ServiceActionImpl#getExceptionType <em>Exception Type</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ServiceActionImpl#getImplementation <em>Implementation</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ServiceActionImpl#getParameters <em>Parameters</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ServiceActionImpl extends MinimalEObjectImpl.Container implements ServiceAction
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getReturnType() <em>Return Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnType()
   * @generated
   * @ordered
   */
  protected RType returnType;

  /**
   * The cached value of the '{@link #getExceptionType() <em>Exception Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExceptionType()
   * @generated
   * @ordered
   */
  protected Type exceptionType;

  /**
   * The default value of the '{@link #getImplementation() <em>Implementation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplementation()
   * @generated
   * @ordered
   */
  protected static final String IMPLEMENTATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getImplementation() <em>Implementation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplementation()
   * @generated
   * @ordered
   */
  protected String implementation = IMPLEMENTATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<ActionParameter> parameters;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServiceActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsamPackage.Literals.SERVICE_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.SERVICE_ACTION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RType getReturnType()
  {
    return returnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReturnType(RType newReturnType, NotificationChain msgs)
  {
    RType oldReturnType = returnType;
    returnType = newReturnType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsamPackage.SERVICE_ACTION__RETURN_TYPE, oldReturnType, newReturnType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReturnType(RType newReturnType)
  {
    if (newReturnType != returnType)
    {
      NotificationChain msgs = null;
      if (returnType != null)
        msgs = ((InternalEObject)returnType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsamPackage.SERVICE_ACTION__RETURN_TYPE, null, msgs);
      if (newReturnType != null)
        msgs = ((InternalEObject)newReturnType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsamPackage.SERVICE_ACTION__RETURN_TYPE, null, msgs);
      msgs = basicSetReturnType(newReturnType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.SERVICE_ACTION__RETURN_TYPE, newReturnType, newReturnType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type getExceptionType()
  {
    return exceptionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExceptionType(Type newExceptionType, NotificationChain msgs)
  {
    Type oldExceptionType = exceptionType;
    exceptionType = newExceptionType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsamPackage.SERVICE_ACTION__EXCEPTION_TYPE, oldExceptionType, newExceptionType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExceptionType(Type newExceptionType)
  {
    if (newExceptionType != exceptionType)
    {
      NotificationChain msgs = null;
      if (exceptionType != null)
        msgs = ((InternalEObject)exceptionType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsamPackage.SERVICE_ACTION__EXCEPTION_TYPE, null, msgs);
      if (newExceptionType != null)
        msgs = ((InternalEObject)newExceptionType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsamPackage.SERVICE_ACTION__EXCEPTION_TYPE, null, msgs);
      msgs = basicSetExceptionType(newExceptionType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.SERVICE_ACTION__EXCEPTION_TYPE, newExceptionType, newExceptionType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getImplementation()
  {
    return implementation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImplementation(String newImplementation)
  {
    String oldImplementation = implementation;
    implementation = newImplementation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.SERVICE_ACTION__IMPLEMENTATION, oldImplementation, implementation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ActionParameter> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<ActionParameter>(ActionParameter.class, this, AsamPackage.SERVICE_ACTION__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsamPackage.SERVICE_ACTION__RETURN_TYPE:
        return basicSetReturnType(null, msgs);
      case AsamPackage.SERVICE_ACTION__EXCEPTION_TYPE:
        return basicSetExceptionType(null, msgs);
      case AsamPackage.SERVICE_ACTION__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsamPackage.SERVICE_ACTION__NAME:
        return getName();
      case AsamPackage.SERVICE_ACTION__RETURN_TYPE:
        return getReturnType();
      case AsamPackage.SERVICE_ACTION__EXCEPTION_TYPE:
        return getExceptionType();
      case AsamPackage.SERVICE_ACTION__IMPLEMENTATION:
        return getImplementation();
      case AsamPackage.SERVICE_ACTION__PARAMETERS:
        return getParameters();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsamPackage.SERVICE_ACTION__NAME:
        setName((String)newValue);
        return;
      case AsamPackage.SERVICE_ACTION__RETURN_TYPE:
        setReturnType((RType)newValue);
        return;
      case AsamPackage.SERVICE_ACTION__EXCEPTION_TYPE:
        setExceptionType((Type)newValue);
        return;
      case AsamPackage.SERVICE_ACTION__IMPLEMENTATION:
        setImplementation((String)newValue);
        return;
      case AsamPackage.SERVICE_ACTION__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends ActionParameter>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsamPackage.SERVICE_ACTION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AsamPackage.SERVICE_ACTION__RETURN_TYPE:
        setReturnType((RType)null);
        return;
      case AsamPackage.SERVICE_ACTION__EXCEPTION_TYPE:
        setExceptionType((Type)null);
        return;
      case AsamPackage.SERVICE_ACTION__IMPLEMENTATION:
        setImplementation(IMPLEMENTATION_EDEFAULT);
        return;
      case AsamPackage.SERVICE_ACTION__PARAMETERS:
        getParameters().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsamPackage.SERVICE_ACTION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AsamPackage.SERVICE_ACTION__RETURN_TYPE:
        return returnType != null;
      case AsamPackage.SERVICE_ACTION__EXCEPTION_TYPE:
        return exceptionType != null;
      case AsamPackage.SERVICE_ACTION__IMPLEMENTATION:
        return IMPLEMENTATION_EDEFAULT == null ? implementation != null : !IMPLEMENTATION_EDEFAULT.equals(implementation);
      case AsamPackage.SERVICE_ACTION__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", implementation: ");
    result.append(implementation);
    result.append(')');
    return result.toString();
  }

} //ServiceActionImpl
