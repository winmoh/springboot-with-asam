/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.asam.asam.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.asam.asam.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AsamFactoryImpl extends EFactoryImpl implements AsamFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AsamFactory init()
  {
    try
    {
      AsamFactory theAsamFactory = (AsamFactory)EPackage.Registry.INSTANCE.getEFactory(AsamPackage.eNS_URI);
      if (theAsamFactory != null)
      {
        return theAsamFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AsamFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AsamFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AsamPackage.SBOOT: return createSboot();
      case AsamPackage.ELEMENT: return createElement();
      case AsamPackage.RELATIONSHIP: return createRelationship();
      case AsamPackage.CONFIGURATION: return createConfiguration();
      case AsamPackage.SERVER_INFO: return createServerInfo();
      case AsamPackage.DATABASE_INFO: return createDatabaseInfo();
      case AsamPackage.ENTITY: return createEntity();
      case AsamPackage.DTO: return createDTO();
      case AsamPackage.SERVICE: return createService();
      case AsamPackage.CONTROLLER: return createController();
      case AsamPackage.REPOSITORY: return createRepository();
      case AsamPackage.REPOSITORY_METHOD: return createRepositoryMethod();
      case AsamPackage.FIND_BY_METHOD: return createFindByMethod();
      case AsamPackage.DELETE_BY_METHOD: return createDeleteByMethod();
      case AsamPackage.CUSTOM_QUERY_METHOD: return createCustomQueryMethod();
      case AsamPackage.SERVICE_ACTION: return createServiceAction();
      case AsamPackage.CONTROLLER_ACTION: return createControllerAction();
      case AsamPackage.ACTION_PARAMETER: return createActionParameter();
      case AsamPackage.PROPERTY: return createProperty();
      case AsamPackage.TYPE: return createType();
      case AsamPackage.RTYPE: return createRType();
      case AsamPackage.LIST_TYPE: return createListType();
      case AsamPackage.SET_TYPE: return createSetType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AsamPackage.VTYPES:
        return createVTypesFromString(eDataType, initialValue);
      case AsamPackage.HTTP_METHODS:
        return createHttpMethodsFromString(eDataType, initialValue);
      case AsamPackage.RDBMS:
        return createRDBMSFromString(eDataType, initialValue);
      case AsamPackage.DB_RELATIONS:
        return createdbRelationsFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AsamPackage.VTYPES:
        return convertVTypesToString(eDataType, instanceValue);
      case AsamPackage.HTTP_METHODS:
        return convertHttpMethodsToString(eDataType, instanceValue);
      case AsamPackage.RDBMS:
        return convertRDBMSToString(eDataType, instanceValue);
      case AsamPackage.DB_RELATIONS:
        return convertdbRelationsToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sboot createSboot()
  {
    SbootImpl sboot = new SbootImpl();
    return sboot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Relationship createRelationship()
  {
    RelationshipImpl relationship = new RelationshipImpl();
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Configuration createConfiguration()
  {
    ConfigurationImpl configuration = new ConfigurationImpl();
    return configuration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServerInfo createServerInfo()
  {
    ServerInfoImpl serverInfo = new ServerInfoImpl();
    return serverInfo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatabaseInfo createDatabaseInfo()
  {
    DatabaseInfoImpl databaseInfo = new DatabaseInfoImpl();
    return databaseInfo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DTO createDTO()
  {
    DTOImpl dto = new DTOImpl();
    return dto;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Service createService()
  {
    ServiceImpl service = new ServiceImpl();
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Controller createController()
  {
    ControllerImpl controller = new ControllerImpl();
    return controller;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Repository createRepository()
  {
    RepositoryImpl repository = new RepositoryImpl();
    return repository;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RepositoryMethod createRepositoryMethod()
  {
    RepositoryMethodImpl repositoryMethod = new RepositoryMethodImpl();
    return repositoryMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FindByMethod createFindByMethod()
  {
    FindByMethodImpl findByMethod = new FindByMethodImpl();
    return findByMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteByMethod createDeleteByMethod()
  {
    DeleteByMethodImpl deleteByMethod = new DeleteByMethodImpl();
    return deleteByMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomQueryMethod createCustomQueryMethod()
  {
    CustomQueryMethodImpl customQueryMethod = new CustomQueryMethodImpl();
    return customQueryMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceAction createServiceAction()
  {
    ServiceActionImpl serviceAction = new ServiceActionImpl();
    return serviceAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ControllerAction createControllerAction()
  {
    ControllerActionImpl controllerAction = new ControllerActionImpl();
    return controllerAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionParameter createActionParameter()
  {
    ActionParameterImpl actionParameter = new ActionParameterImpl();
    return actionParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RType createRType()
  {
    RTypeImpl rType = new RTypeImpl();
    return rType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListType createListType()
  {
    ListTypeImpl listType = new ListTypeImpl();
    return listType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetType createSetType()
  {
    SetTypeImpl setType = new SetTypeImpl();
    return setType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VTypes createVTypesFromString(EDataType eDataType, String initialValue)
  {
    VTypes result = VTypes.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVTypesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HttpMethods createHttpMethodsFromString(EDataType eDataType, String initialValue)
  {
    HttpMethods result = HttpMethods.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertHttpMethodsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RDBMS createRDBMSFromString(EDataType eDataType, String initialValue)
  {
    RDBMS result = RDBMS.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRDBMSToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dbRelations createdbRelationsFromString(EDataType eDataType, String initialValue)
  {
    dbRelations result = dbRelations.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertdbRelationsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsamPackage getAsamPackage()
  {
    return (AsamPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AsamPackage getPackage()
  {
    return AsamPackage.eINSTANCE;
  }

} //AsamFactoryImpl
