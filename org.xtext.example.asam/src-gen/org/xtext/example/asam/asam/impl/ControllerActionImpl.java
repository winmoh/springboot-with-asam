/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.asam.asam.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.asam.asam.ActionParameter;
import org.xtext.example.asam.asam.AsamPackage;
import org.xtext.example.asam.asam.ControllerAction;
import org.xtext.example.asam.asam.HttpMethods;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Controller Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerActionImpl#getMethod <em>Method</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerActionImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerActionImpl#getServiceAction <em>Service Action</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerActionImpl#getUrl <em>Url</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerActionImpl#getParameters <em>Parameters</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ControllerActionImpl extends MinimalEObjectImpl.Container implements ControllerAction
{
  /**
   * The default value of the '{@link #getMethod() <em>Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethod()
   * @generated
   * @ordered
   */
  protected static final HttpMethods METHOD_EDEFAULT = HttpMethods.GET;

  /**
   * The cached value of the '{@link #getMethod() <em>Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethod()
   * @generated
   * @ordered
   */
  protected HttpMethods method = METHOD_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getServiceAction() <em>Service Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServiceAction()
   * @generated
   * @ordered
   */
  protected static final String SERVICE_ACTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getServiceAction() <em>Service Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServiceAction()
   * @generated
   * @ordered
   */
  protected String serviceAction = SERVICE_ACTION_EDEFAULT;

  /**
   * The default value of the '{@link #getUrl() <em>Url</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUrl()
   * @generated
   * @ordered
   */
  protected static final String URL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUrl() <em>Url</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUrl()
   * @generated
   * @ordered
   */
  protected String url = URL_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<ActionParameter> parameters;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ControllerActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsamPackage.Literals.CONTROLLER_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HttpMethods getMethod()
  {
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMethod(HttpMethods newMethod)
  {
    HttpMethods oldMethod = method;
    method = newMethod == null ? METHOD_EDEFAULT : newMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.CONTROLLER_ACTION__METHOD, oldMethod, method));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.CONTROLLER_ACTION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getServiceAction()
  {
    return serviceAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setServiceAction(String newServiceAction)
  {
    String oldServiceAction = serviceAction;
    serviceAction = newServiceAction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.CONTROLLER_ACTION__SERVICE_ACTION, oldServiceAction, serviceAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getUrl()
  {
    return url;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUrl(String newUrl)
  {
    String oldUrl = url;
    url = newUrl;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.CONTROLLER_ACTION__URL, oldUrl, url));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ActionParameter> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<ActionParameter>(ActionParameter.class, this, AsamPackage.CONTROLLER_ACTION__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER_ACTION__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER_ACTION__METHOD:
        return getMethod();
      case AsamPackage.CONTROLLER_ACTION__NAME:
        return getName();
      case AsamPackage.CONTROLLER_ACTION__SERVICE_ACTION:
        return getServiceAction();
      case AsamPackage.CONTROLLER_ACTION__URL:
        return getUrl();
      case AsamPackage.CONTROLLER_ACTION__PARAMETERS:
        return getParameters();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER_ACTION__METHOD:
        setMethod((HttpMethods)newValue);
        return;
      case AsamPackage.CONTROLLER_ACTION__NAME:
        setName((String)newValue);
        return;
      case AsamPackage.CONTROLLER_ACTION__SERVICE_ACTION:
        setServiceAction((String)newValue);
        return;
      case AsamPackage.CONTROLLER_ACTION__URL:
        setUrl((String)newValue);
        return;
      case AsamPackage.CONTROLLER_ACTION__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends ActionParameter>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER_ACTION__METHOD:
        setMethod(METHOD_EDEFAULT);
        return;
      case AsamPackage.CONTROLLER_ACTION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AsamPackage.CONTROLLER_ACTION__SERVICE_ACTION:
        setServiceAction(SERVICE_ACTION_EDEFAULT);
        return;
      case AsamPackage.CONTROLLER_ACTION__URL:
        setUrl(URL_EDEFAULT);
        return;
      case AsamPackage.CONTROLLER_ACTION__PARAMETERS:
        getParameters().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER_ACTION__METHOD:
        return method != METHOD_EDEFAULT;
      case AsamPackage.CONTROLLER_ACTION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AsamPackage.CONTROLLER_ACTION__SERVICE_ACTION:
        return SERVICE_ACTION_EDEFAULT == null ? serviceAction != null : !SERVICE_ACTION_EDEFAULT.equals(serviceAction);
      case AsamPackage.CONTROLLER_ACTION__URL:
        return URL_EDEFAULT == null ? url != null : !URL_EDEFAULT.equals(url);
      case AsamPackage.CONTROLLER_ACTION__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (method: ");
    result.append(method);
    result.append(", name: ");
    result.append(name);
    result.append(", serviceAction: ");
    result.append(serviceAction);
    result.append(", url: ");
    result.append(url);
    result.append(')');
    return result.toString();
  }

} //ControllerActionImpl
