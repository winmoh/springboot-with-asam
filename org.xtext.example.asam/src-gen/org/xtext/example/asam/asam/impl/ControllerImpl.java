/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.asam.asam.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.asam.asam.AsamPackage;
import org.xtext.example.asam.asam.Controller;
import org.xtext.example.asam.asam.CustomAction;
import org.xtext.example.asam.asam.ParamTrasfert;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Controller</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerImpl#getBaseUrl <em>Base Url</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerImpl#getCactions <em>Cactions</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerImpl#getCparam <em>Cparam</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerImpl#getFparam <em>Fparam</em>}</li>
 *   <li>{@link org.xtext.example.asam.asam.impl.ControllerImpl#getDparam <em>Dparam</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ControllerImpl extends MinimalEObjectImpl.Container implements Controller
{
  /**
   * The default value of the '{@link #getBaseUrl() <em>Base Url</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseUrl()
   * @generated
   * @ordered
   */
  protected static final String BASE_URL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBaseUrl() <em>Base Url</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseUrl()
   * @generated
   * @ordered
   */
  protected String baseUrl = BASE_URL_EDEFAULT;

  /**
   * The cached value of the '{@link #getCactions() <em>Cactions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCactions()
   * @generated
   * @ordered
   */
  protected EList<CustomAction> cactions;

  /**
   * The default value of the '{@link #getCparam() <em>Cparam</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCparam()
   * @generated
   * @ordered
   */
  protected static final ParamTrasfert CPARAM_EDEFAULT = ParamTrasfert.REQUEST_BODY;

  /**
   * The cached value of the '{@link #getCparam() <em>Cparam</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCparam()
   * @generated
   * @ordered
   */
  protected ParamTrasfert cparam = CPARAM_EDEFAULT;

  /**
   * The default value of the '{@link #getFparam() <em>Fparam</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFparam()
   * @generated
   * @ordered
   */
  protected static final ParamTrasfert FPARAM_EDEFAULT = ParamTrasfert.REQUEST_BODY;

  /**
   * The cached value of the '{@link #getFparam() <em>Fparam</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFparam()
   * @generated
   * @ordered
   */
  protected ParamTrasfert fparam = FPARAM_EDEFAULT;

  /**
   * The default value of the '{@link #getDparam() <em>Dparam</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDparam()
   * @generated
   * @ordered
   */
  protected static final ParamTrasfert DPARAM_EDEFAULT = ParamTrasfert.REQUEST_BODY;

  /**
   * The cached value of the '{@link #getDparam() <em>Dparam</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDparam()
   * @generated
   * @ordered
   */
  protected ParamTrasfert dparam = DPARAM_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ControllerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsamPackage.Literals.CONTROLLER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBaseUrl()
  {
    return baseUrl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBaseUrl(String newBaseUrl)
  {
    String oldBaseUrl = baseUrl;
    baseUrl = newBaseUrl;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.CONTROLLER__BASE_URL, oldBaseUrl, baseUrl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CustomAction> getCactions()
  {
    if (cactions == null)
    {
      cactions = new EObjectContainmentEList<CustomAction>(CustomAction.class, this, AsamPackage.CONTROLLER__CACTIONS);
    }
    return cactions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamTrasfert getCparam()
  {
    return cparam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCparam(ParamTrasfert newCparam)
  {
    ParamTrasfert oldCparam = cparam;
    cparam = newCparam == null ? CPARAM_EDEFAULT : newCparam;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.CONTROLLER__CPARAM, oldCparam, cparam));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamTrasfert getFparam()
  {
    return fparam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFparam(ParamTrasfert newFparam)
  {
    ParamTrasfert oldFparam = fparam;
    fparam = newFparam == null ? FPARAM_EDEFAULT : newFparam;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.CONTROLLER__FPARAM, oldFparam, fparam));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamTrasfert getDparam()
  {
    return dparam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDparam(ParamTrasfert newDparam)
  {
    ParamTrasfert oldDparam = dparam;
    dparam = newDparam == null ? DPARAM_EDEFAULT : newDparam;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsamPackage.CONTROLLER__DPARAM, oldDparam, dparam));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER__CACTIONS:
        return ((InternalEList<?>)getCactions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER__BASE_URL:
        return getBaseUrl();
      case AsamPackage.CONTROLLER__CACTIONS:
        return getCactions();
      case AsamPackage.CONTROLLER__CPARAM:
        return getCparam();
      case AsamPackage.CONTROLLER__FPARAM:
        return getFparam();
      case AsamPackage.CONTROLLER__DPARAM:
        return getDparam();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER__BASE_URL:
        setBaseUrl((String)newValue);
        return;
      case AsamPackage.CONTROLLER__CACTIONS:
        getCactions().clear();
        getCactions().addAll((Collection<? extends CustomAction>)newValue);
        return;
      case AsamPackage.CONTROLLER__CPARAM:
        setCparam((ParamTrasfert)newValue);
        return;
      case AsamPackage.CONTROLLER__FPARAM:
        setFparam((ParamTrasfert)newValue);
        return;
      case AsamPackage.CONTROLLER__DPARAM:
        setDparam((ParamTrasfert)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER__BASE_URL:
        setBaseUrl(BASE_URL_EDEFAULT);
        return;
      case AsamPackage.CONTROLLER__CACTIONS:
        getCactions().clear();
        return;
      case AsamPackage.CONTROLLER__CPARAM:
        setCparam(CPARAM_EDEFAULT);
        return;
      case AsamPackage.CONTROLLER__FPARAM:
        setFparam(FPARAM_EDEFAULT);
        return;
      case AsamPackage.CONTROLLER__DPARAM:
        setDparam(DPARAM_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsamPackage.CONTROLLER__BASE_URL:
        return BASE_URL_EDEFAULT == null ? baseUrl != null : !BASE_URL_EDEFAULT.equals(baseUrl);
      case AsamPackage.CONTROLLER__CACTIONS:
        return cactions != null && !cactions.isEmpty();
      case AsamPackage.CONTROLLER__CPARAM:
        return cparam != CPARAM_EDEFAULT;
      case AsamPackage.CONTROLLER__FPARAM:
        return fparam != FPARAM_EDEFAULT;
      case AsamPackage.CONTROLLER__DPARAM:
        return dparam != DPARAM_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (baseUrl: ");
    result.append(baseUrl);
    result.append(", cparam: ");
    result.append(cparam);
    result.append(", fparam: ");
    result.append(fparam);
    result.append(", dparam: ");
    result.append(dparam);
    result.append(')');
    return result.toString();
  }

} //ControllerImpl
