/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.asam.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.asam.asam.ActionParameter;
import org.xtext.example.asam.asam.AsamPackage;
import org.xtext.example.asam.asam.Configuration;
import org.xtext.example.asam.asam.Controller;
import org.xtext.example.asam.asam.CustomAction;
import org.xtext.example.asam.asam.CustomQueryMethod;
import org.xtext.example.asam.asam.DTO;
import org.xtext.example.asam.asam.DatabaseInfo;
import org.xtext.example.asam.asam.DeleteByMethod;
import org.xtext.example.asam.asam.Entity;
import org.xtext.example.asam.asam.EntityRelationship;
import org.xtext.example.asam.asam.FindByMethod;
import org.xtext.example.asam.asam.Identifier;
import org.xtext.example.asam.asam.ListType;
import org.xtext.example.asam.asam.Property;
import org.xtext.example.asam.asam.RType;
import org.xtext.example.asam.asam.Repository;
import org.xtext.example.asam.asam.Sboot;
import org.xtext.example.asam.asam.ServerInfo;
import org.xtext.example.asam.asam.Service;
import org.xtext.example.asam.asam.ServiceAction;
import org.xtext.example.asam.asam.SetType;
import org.xtext.example.asam.asam.Type;
import org.xtext.example.asam.services.AsamGrammarAccess;

@SuppressWarnings("all")
public class AsamSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AsamGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AsamPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AsamPackage.ACTION_PARAMETER:
				sequence_ActionParameter(context, (ActionParameter) semanticObject); 
				return; 
			case AsamPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case AsamPackage.CONTROLLER:
				sequence_Controller(context, (Controller) semanticObject); 
				return; 
			case AsamPackage.CUSTOM_ACTION:
				sequence_CustomAction(context, (CustomAction) semanticObject); 
				return; 
			case AsamPackage.CUSTOM_QUERY_METHOD:
				sequence_CustomQueryMethod(context, (CustomQueryMethod) semanticObject); 
				return; 
			case AsamPackage.DTO:
				sequence_DTO(context, (DTO) semanticObject); 
				return; 
			case AsamPackage.DATABASE_INFO:
				sequence_DatabaseInfo(context, (DatabaseInfo) semanticObject); 
				return; 
			case AsamPackage.DELETE_BY_METHOD:
				sequence_DeleteByMethod(context, (DeleteByMethod) semanticObject); 
				return; 
			case AsamPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case AsamPackage.ENTITY_RELATIONSHIP:
				sequence_EntityRelationship(context, (EntityRelationship) semanticObject); 
				return; 
			case AsamPackage.FIND_BY_METHOD:
				sequence_FindByMethod(context, (FindByMethod) semanticObject); 
				return; 
			case AsamPackage.IDENTIFIER:
				sequence_Identifier(context, (Identifier) semanticObject); 
				return; 
			case AsamPackage.LIST_TYPE:
				sequence_ListType(context, (ListType) semanticObject); 
				return; 
			case AsamPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case AsamPackage.RTYPE:
				sequence_RType(context, (RType) semanticObject); 
				return; 
			case AsamPackage.REPOSITORY:
				sequence_Repository(context, (Repository) semanticObject); 
				return; 
			case AsamPackage.SBOOT:
				sequence_Sboot(context, (Sboot) semanticObject); 
				return; 
			case AsamPackage.SERVER_INFO:
				sequence_ServerInfo(context, (ServerInfo) semanticObject); 
				return; 
			case AsamPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case AsamPackage.SERVICE_ACTION:
				sequence_ServiceAction(context, (ServiceAction) semanticObject); 
				return; 
			case AsamPackage.SET_TYPE:
				sequence_SetType(context, (SetType) semanticObject); 
				return; 
			case AsamPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ActionParameter returns ActionParameter
	 *
	 * Constraint:
	 *     (nom=ID type=Type defaultValue=STRING?)
	 * </pre>
	 */
	protected void sequence_ActionParameter(ISerializationContext context, ActionParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     (server=ServerInfo? database=DatabaseInfo)
	 * </pre>
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Controller returns Controller
	 *
	 * Constraint:
	 *     (
	 *         entity=[Entity|ID] 
	 *         baseUrl=PATH? 
	 *         cactions+=CustomAction* 
	 *         cparam=ParamTrasfert? 
	 *         fparam=ParamTrasfert? 
	 *         dparam=ParamTrasfert?
	 *     )
	 * </pre>
	 */
	protected void sequence_Controller(ISerializationContext context, Controller semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CustomAction returns CustomAction
	 *
	 * Constraint:
	 *     (method=HttpMethods nom=ID url=STRING? parameters+=ActionParameter*)
	 * </pre>
	 */
	protected void sequence_CustomAction(ISerializationContext context, CustomAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CustomQueryMethod returns CustomQueryMethod
	 *
	 * Constraint:
	 *     query=STRING
	 * </pre>
	 */
	protected void sequence_CustomQueryMethod(ISerializationContext context, CustomQueryMethod semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.CUSTOM_QUERY_METHOD__QUERY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.CUSTOM_QUERY_METHOD__QUERY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCustomQueryMethodAccess().getQuerySTRINGTerminalRuleCall_2_0(), semanticObject.getQuery());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns DTO
	 *     DTO returns DTO
	 *
	 * Constraint:
	 *     (nom=ID properties+=Property*)
	 * </pre>
	 */
	protected void sequence_DTO(ISerializationContext context, DTO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DatabaseInfo returns DatabaseInfo
	 *
	 * Constraint:
	 *     (type=RDBMS nom=ID port=INT username=ID password=ID)
	 * </pre>
	 */
	protected void sequence_DatabaseInfo(ISerializationContext context, DatabaseInfo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.DATABASE_INFO__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.DATABASE_INFO__TYPE));
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.DATABASE_INFO__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.DATABASE_INFO__NOM));
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.DATABASE_INFO__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.DATABASE_INFO__PORT));
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.DATABASE_INFO__USERNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.DATABASE_INFO__USERNAME));
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.DATABASE_INFO__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.DATABASE_INFO__PASSWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatabaseInfoAccess().getTypeRDBMSEnumRuleCall_3_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDatabaseInfoAccess().getNomIDTerminalRuleCall_5_0(), semanticObject.getNom());
		feeder.accept(grammarAccess.getDatabaseInfoAccess().getPortINTTerminalRuleCall_7_0(), semanticObject.getPort());
		feeder.accept(grammarAccess.getDatabaseInfoAccess().getUsernameIDTerminalRuleCall_9_0(), semanticObject.getUsername());
		feeder.accept(grammarAccess.getDatabaseInfoAccess().getPasswordIDTerminalRuleCall_11_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeleteByMethod returns DeleteByMethod
	 *
	 * Constraint:
	 *     (property=ID ptype=VTypes)
	 * </pre>
	 */
	protected void sequence_DeleteByMethod(ISerializationContext context, DeleteByMethod semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.DELETE_BY_METHOD__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.DELETE_BY_METHOD__PROPERTY));
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.DELETE_BY_METHOD__PTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.DELETE_BY_METHOD__PTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteByMethodAccess().getPropertyIDTerminalRuleCall_2_0(), semanticObject.getProperty());
		feeder.accept(grammarAccess.getDeleteByMethodAccess().getPtypeVTypesEnumRuleCall_4_0(), semanticObject.getPtype());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns EntityRelationship
	 *     EntityRelationship returns EntityRelationship
	 *
	 * Constraint:
	 *     (type=dbRelations source=[Entity|ID] target=[Entity|ID])
	 * </pre>
	 */
	protected void sequence_EntityRelationship(ISerializationContext context, EntityRelationship semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.ENTITY_RELATIONSHIP__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.ENTITY_RELATIONSHIP__TYPE));
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.ENTITY_RELATIONSHIP__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.ENTITY_RELATIONSHIP__SOURCE));
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.ENTITY_RELATIONSHIP__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.ENTITY_RELATIONSHIP__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityRelationshipAccess().getTypeDbRelationsEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getEntityRelationshipAccess().getSourceEntityIDTerminalRuleCall_3_0_1(), semanticObject.eGet(AsamPackage.Literals.ENTITY_RELATIONSHIP__SOURCE, false));
		feeder.accept(grammarAccess.getEntityRelationshipAccess().getTargetEntityIDTerminalRuleCall_5_0_1(), semanticObject.eGet(AsamPackage.Literals.ENTITY_RELATIONSHIP__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (
	 *         nom=ID 
	 *         extends=[Entity|ID]? 
	 *         ident=Identifier 
	 *         properties+=Property* 
	 *         repo=Repository? 
	 *         control=Controller
	 *     )
	 * </pre>
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FindByMethod returns FindByMethod
	 *
	 * Constraint:
	 *     (property=ID ptype=VTypes)
	 * </pre>
	 */
	protected void sequence_FindByMethod(ISerializationContext context, FindByMethod semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.FIND_BY_METHOD__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.FIND_BY_METHOD__PROPERTY));
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.FIND_BY_METHOD__PTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.FIND_BY_METHOD__PTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFindByMethodAccess().getPropertyIDTerminalRuleCall_2_0(), semanticObject.getProperty());
		feeder.accept(grammarAccess.getFindByMethodAccess().getPtypeVTypesEnumRuleCall_4_0(), semanticObject.getPtype());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Identifier returns Identifier
	 *
	 * Constraint:
	 *     (nom=ID type=VTypes)
	 * </pre>
	 */
	protected void sequence_Identifier(ISerializationContext context, Identifier semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.IDENTIFIER__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.IDENTIFIER__NOM));
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.IDENTIFIER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.IDENTIFIER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdentifierAccess().getNomIDTerminalRuleCall_1_0(), semanticObject.getNom());
		feeder.accept(grammarAccess.getIdentifierAccess().getTypeVTypesEnumRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns ListType
	 *     RType returns ListType
	 *     ListType returns ListType
	 *
	 * Constraint:
	 *     type=Type
	 * </pre>
	 */
	protected void sequence_ListType(ISerializationContext context, ListType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListTypeAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (nom=ID type=Type defaultValue=STRING?)
	 * </pre>
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RType returns RType
	 *
	 * Constraint:
	 *     Vypes=VTypes
	 * </pre>
	 */
	protected void sequence_RType(ISerializationContext context, RType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.RTYPE__VYPES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.RTYPE__VYPES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRTypeAccess().getVypesVTypesEnumRuleCall_0_0(), semanticObject.getVypes());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Repository
	 *     Repository returns Repository
	 *
	 * Constraint:
	 *     (
	 *         (findBy+=FindByMethod* deleteBy+=DeleteByMethod+ customQueryMethod+=CustomQueryMethod+) | 
	 *         (findBy+=FindByMethod* customQueryMethod+=CustomQueryMethod+) | 
	 *         customQueryMethod+=CustomQueryMethod+
	 *     )?
	 * </pre>
	 */
	protected void sequence_Repository(ISerializationContext context, Repository semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sboot returns Sboot
	 *
	 * Constraint:
	 *     (nom=ID configuration=Configuration? elements+=Element*)
	 * </pre>
	 */
	protected void sequence_Sboot(ISerializationContext context, Sboot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ServerInfo returns ServerInfo
	 *
	 * Constraint:
	 *     (port=INT path=PATH?)
	 * </pre>
	 */
	protected void sequence_ServerInfo(ISerializationContext context, ServerInfo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ServiceAction returns ServiceAction
	 *
	 * Constraint:
	 *     (nom=ID returnType=RType exceptionType=Type? implementation=STRING? parameters+=ActionParameter*)
	 * </pre>
	 */
	protected void sequence_ServiceAction(ISerializationContext context, ServiceAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Service
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (nom=ID entity=[Entity|ID] actions+=ServiceAction*)
	 * </pre>
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns SetType
	 *     SetType returns SetType
	 *
	 * Constraint:
	 *     type=Type
	 * </pre>
	 */
	protected void sequence_SetType(ISerializationContext context, SetType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     Vtypes=VTypes
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsamPackage.Literals.TYPE__VTYPES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsamPackage.Literals.TYPE__VTYPES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getVtypesVTypesEnumRuleCall_0_0(), semanticObject.getVtypes());
		feeder.finish();
	}
	
	
}
